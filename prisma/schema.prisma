// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoleUser {
  CUSTOMER
  ADMIN
}

enum TypeSeat {
  ECONOMY
  BUSINESS
  FIRST
}

enum StatusTicket {
  PENDING
  SUCCESS
  FAILED
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String
  password String
  passport String?
  role     RoleUser
  Ticket   Ticket[]
  sessions Session[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Airplane {
  id     String   @id @default(uuid())
  code   String   @default("ABC-123")
  image  String
  name   String
  Flight Flight[]
}

model Flight {
  id                  String       @id @default(uuid())
  planeId             String
  plane               Airplane     @relation(fields: [planeId], references: [id])
  departureDate       DateTime
  departureCity       String
  departureCityCode   String
  arrivalDate         DateTime
  destinationCity     DateTime
  destinationCityCode String
  price               BigInt
  FlightSeat          FlightSeat[]
  Ticket              Ticket[]
}

model FlightSeat {
  id         String   @id @default(uuid())
  flightId   String
  flight     Flight   @relation(fields: [flightId], references: [id])
  seatNumber Int
  isBooked   Boolean? @default(false)
  type       TypeSeat
  Ticket     Ticket?
}

model Ticket {
  id            String       @id @default(uuid())
  code          Int          @unique
  flightId      String
  flight        Flight       @relation(fields: [flightId], references: [id])
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  flightSeatId  String       @unique
  flightSeat    FlightSeat   @relation(fields: [flightSeatId], references: [id])
  bookingDate   DateTime
  price         BigInt
  status        StatusTicket
  tokenMidtrans String?
}
